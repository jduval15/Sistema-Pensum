name: CI + Code Quality + Deploy - Sistema de Control de Pensum

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch: # Permite ejecución manual

jobs:
  deploy:
    name: Verificación completa y preparación de Deployment
    runs-on: ubuntu-latest

    strategy:
      matrix:
        project: [backend, frontend]

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: ${{ matrix.project }}/package-lock.json

      - name: Instalar dependencias
        working-directory: ./${{ matrix.project }}
        run: npm ci

      # 🧠 Verificación de Calidad
      - name: Verificar formato con Prettier
        run: |
          echo "🧾 Verificando formato con Prettier..."
          npx prettier --check "**/*.{js,ts,tsx,json,md}" || (echo "❌ Formato incorrecto detectado" && exit 1)
          echo "✅ Formato correcto"

      - name: Verificar Linter (ESLint)
        run: |
          echo "🧹 Ejecutando ESLint..."
          npx eslint . --ext .js,.ts,.tsx || (echo "❌ Errores de lint detectados" && exit 1)
          echo "✅ ESLint sin errores"

      - name: Verificar Tipos TypeScript
        if: matrix.project == 'frontend'
        working-directory: ./frontend
        run: |
          echo "🧠 Verificando tipos TypeScript..."
          npx tsc --noEmit || (echo "❌ Errores de tipos detectados" && exit 1)
          echo "✅ Tipos verificados correctamente"

      - name: Ejecutar tests
        working-directory: ./${{ matrix.project }}
        run: |
          if npm test --if-present; then
            echo "✅ Tests completados correctamente"
          else
            echo "❌ Tests fallaron"
            exit 1
          fi

      # 🏗️ Build y Preparación
      - name: Build Backend
        if: matrix.project == 'backend'
        working-directory: ./backend
        run: |
          echo "🏗️ Construyendo backend..."
          npx prisma generate || (echo "❌ Error al generar Prisma Client" && exit 1)
          echo "✅ Backend listo para producción"

      - name: Build Frontend
        if: matrix.project == 'frontend'
        working-directory: ./frontend
        run: |
          echo "🏗️ Compilando frontend..."
          npm run build || (echo "❌ Error compilando el frontend" && exit 1)
          
          echo "🔍 Verificando carpeta de salida..."
          if [ -d "dist" ]; then
            TARGET_DIR="dist"
          elif [ -d "build" ]; then
            TARGET_DIR="build"
          else
            echo "❌ No se encontró carpeta de build (dist/ o build/)"
            exit 1
          fi

          echo "📁 Contenido del build:"
          ls -lh $TARGET_DIR/ || echo "⚠️ No se pudo listar el contenido"

          echo "📦 Tamaño total del build:"
          du -sh $TARGET_DIR/ || echo "⚠️ No se pudo calcular el tamaño"

      # 📋 Información general del deployment
      - name: Información del Deployment
        run: |
          echo ""
          echo "🚀 Sistema de Control de Pensum - Ready to Deploy"
          echo "📦 Versión: $(date +%Y.%m.%d)"
          echo "🌿 Branch: ${{ github.ref_name }}"
          echo "👤 Autor: ${{ github.actor }}"
          echo "💬 Commit: ${{ github.event.head_commit.message }}"
          echo ""
          echo "Plataformas sugeridas para el despliegue:"
          echo "  • 🟩 Vercel → Frontend"
          echo "  • 🟦 Railway → Backend + Database"
          echo "  • 🟪 Render → Full Stack"
          echo "  • 🟧 Heroku → Full Stack"
          echo ""
          echo "📚 Revisa INSTRUCCIONES.md para detalles de configuración"

      # ✅ Validación final
      - name: Validación Pre-Deploy
        run: |
          echo "🔍 Validando estructura y archivos críticos..."
          test -d backend || (echo "❌ Falta carpeta backend" && exit 1)
          test -d frontend || (echo "❌ Falta carpeta frontend" && exit 1)
          test -f README.md || (echo "⚠️ Falta README.md (recomendado)")
          echo "✅ Proyecto verificado correctamente"

      - name: Deployment Ready ✅
        run: |
          echo "🎉 El proyecto ha pasado todas las validaciones"
          echo "🚀 Listo para deployment en la plataforma de tu elección"
          echo ""
          echo "📁 Estructura de producción validada"
          echo "✔️ Calidad del código aprobada"
          echo "💪 Build generado correctamente"
