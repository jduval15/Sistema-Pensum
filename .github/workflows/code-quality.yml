name: Code Quality

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  quality-check:
    name: Verificación de Calidad del Código
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Verificar estructura de carpetas
        run: |
          echo "📁 Verificando estructura del proyecto..."
          test -d backend/src || (echo "❌ Falta carpeta backend/src" && exit 1)
          test -d frontend/src || (echo "❌ Falta carpeta frontend/src" && exit 1)
          echo "✅ Estructura verificada"

      - name: Verificar archivos críticos
        run: |
          echo "🔍 Verificando archivos esenciales..."
          test -f backend/package.json || (echo "❌ Falta backend/package.json" && exit 1)
          test -f frontend/package.json || (echo "❌ Falta frontend/package.json" && exit 1)
          test -f backend/prisma/schema.prisma || (echo "❌ Falta schema.prisma" && exit 1)
          test -f README.md || (echo "❌ Falta README.md" && exit 1)
          echo "✅ Archivos críticos presentes"

      - name: Verificar formato de código (Prettier)
        run: |
          echo "🧾 Verificando formato de código..."
          npx prettier --check "**/*.{js,ts,tsx,json,md}" || (echo "❌ Formato incorrecto" && exit 1)
          echo "✅ Formato correcto"

      - name: Análisis de código (ESLint)
        run: |
          echo "🧠 Ejecutando ESLint..."
          npx eslint . --ext .js,.ts,.tsx || (echo "❌ Errores de lint detectados" && exit 1)
          echo "✅ Lint sin errores"

      - name: Contar líneas de código
        run: |
          echo "📊 Estadísticas del proyecto:"
          echo "Backend:"
          find backend/src -type f \( -name "*.ts" -o -name "*.js" \) -exec wc -l {} + | tail -n 1
          echo "Frontend:"
          find frontend/src -type f \( -name "*.ts" -o -name "*.tsx" \) -exec wc -l {} + | tail -n 1
